Vicare Scheme version 0.1d2+, 64-bit (revision 08bd828acfa9382324150b41f4e86c540c10a886, build 2013-08-27)
Copyright (c) 2006-2010 Abdulaziz Ghuloum and contributors

> (load "cl.scm")
Testing "Fixpoint-combinator-self-app-verify"
Testing "Fixpoint-combinator-self-app"
  C-c C-cUnhandled exception
 Condition components:
   1. &interrupted
   2. &message: "received an interrupt signal"
> (run 1 (Y) (fresh (?) (eigen (x) (== `(,? ,?) Y) (->wo `(,Y ,x) `(,x (,Y ,x))))))
((((S (S (K (S I)))) I) ((S (S (K (S I)))) I)))
> (run 1 (q) (L-etao '((((S (S (K (S I)))) I) ((S (S (K (S I)))) I))) q))
()
> (run 1 (q) (L-etao '(((S (S (K (S I)))) I) ((S (S (K (S I)))) I)) q))
()
> (define Y ((((lambda (x)
      (lambda (y)
        (lambda (z)
          (lambda (w)
            (((lambda (v) ((x z) v)) (lambda (v) ((y z) v)))
              w)))))
     ((lambda (x)
        (lambda (y)
          (lambda (z)
            (lambda (w)
              (((lambda (v) ((x z) v))
                 (lambda (v) ((y z) v)))
                w)))))
       ((lambda (x) (lambda (y) x))
         ((lambda (x)
            (lambda (y)
              (lambda (z)
                (lambda (w)
                  (((lambda (v) ((x z) v))
                     (lambda (v) ((y z) v)))
                    w)))))
           (lambda (x) x)))))
    (lambda (x) x))
   (((lambda (x)
       (lambda (y)
         (lambda (z)
           (lambda (w)
             (((lambda (v) ((x z) v)) (lambda (v) ((y z) v)))
               w)))))
      ((lambda (x)
         (lambda (y)
           (lambda (z)
             (lambda (w)
               (((lambda (v) ((x z) v))
                  (lambda (v) ((y z) v)))
                 w)))))
        ((lambda (x) (lambda (y) x))
          ((lambda (x)
             (lambda (y)
               (lambda (z)
                 (lambda (w)
                   (((lambda (v) ((x z) v))
                      (lambda (v) ((y z) v)))
                     w)))))
            (lambda (x) x)))))
     (lambda (x) x))))
> ((((lambda (x)
      (lambda (y)
        (lambda (z)
          (lambda (w)
            (((lambda (v) ((x z) v)) (lambda (v) ((y z) v)))
              w)))))
     ((lambda (x)
        (lambda (y)
          (lambda (z)
            (lambda (w)
              (((lambda (v) ((x z) v))
                 (lambda (v) ((y z) v)))
                w)))))
       ((lambda (x) (lambda (y) x))
         ((lambda (x)
            (lambda (y)
              (lambda (z)
                (lambda (w)
                  (((lambda (v) ((x z) v))
                     (lambda (v) ((y z) v)))
                    w)))))
           (lambda (x) x)))))
    (lambda (x) x))
   (((lambda (x)
       (lambda (y)
         (lambda (z)
           (lambda (w)
             (((lambda (v) ((x z) v)) (lambda (v) ((y z) v)))
               w)))))
      ((lambda (x)
         (lambda (y)
           (lambda (z)
             (lambda (w)
               (((lambda (v) ((x z) v))
                  (lambda (v) ((y z) v)))
                 w)))))
        ((lambda (x) (lambda (y) x))
          ((lambda (x)
             (lambda (y)
               (lambda (z)
                 (lambda (w)
                   (((lambda (v) ((x z) v))
                      (lambda (v) ((y z) v)))
                     w)))))
            (lambda (x) x)))))
     (lambda (x) x)))
#<procedure>
> Y
#<procedure Y>
> (Y (lambda (!)
       (lambda (n)
         (if (= n 0)
             1
             (* n (! (- n 1)))))))
#<procedure>
> ((Y (lambda (!)
       (lambda (n)
         (if (= n 0)
             1
             (* n (! (- n 1))))))) 5)
120
> 